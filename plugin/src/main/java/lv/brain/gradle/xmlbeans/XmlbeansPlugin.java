/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lv.brain.gradle.xmlbeans;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Dependency;
import org.gradle.api.artifacts.dsl.DependencyHandler;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.plugins.PluginContainer;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;

/**
 * A simple 'hello world' plugin.
 */
public class XmlbeansPlugin implements Plugin<Project> {

    public static final String PATH_SRC_MAIN_JAVA = "/src/main/java";
    public static final String PATH_SRC_MAIN_JAVA_GENERATED = "/src/main/java-generated";
    public static final String PATH_SRC_MAIN_RESOURCES = "/src/main/resources";
    public static final String PATH_SRC_MAIN_RESOURCES_GENERATED = "/src/main/resources-generated";
    public static final String PATH_XSD_SCHEMA = "/srx/xsd/schema";
    public static final String PATH_XSD_SCHEMA_CONFIG = "/src/xsd/config";

    @Override
    public void apply(@NotNull Project project) {
        project.getExtensions().create("xsd", XmlbeansExtension.class);
        initPlugin(project);
        initTasks(project);
        ensureXmlBeansDependency(project);
    }

    private void initTasks(Project project) {
        GenerateSourceFilesTask generateTask = project.getTasks().create("generate-source", GenerateSourceFilesTask.class);
        Task compileTask = project.getTasks().getByName("compileJava");
        compileTask.dependsOn(generateTask);

        CleanUpSourceFilesTask cleanupTask = project.getTasks().create("cleanup-source", CleanUpSourceFilesTask.class);
        Task clean = project.getTasks().getByName("clean");
        clean.dependsOn(cleanupTask);
    }

    private void ensureXmlBeansDependency(Project project) {
        boolean hasXmlBeans = false;
        DependencyHandler dependencies = project.getDependencies();

        //hasXmlBeans = isHasXmlBeans(project, dependencies, hasXmlBeans);

        // If xmlbeans is not found, add it as an api dependency
        if (!hasXmlBeans) {
            dependencies.add("api", "org.apache.xmlbeans:xmlbeans:3.1.0");
        }
    }

    private static boolean isHasXmlBeans(Project project, DependencyHandler dependencies, boolean hasXmlBeans) {
        // Check all configurations for xmlbeans dependency
        for (Dependency dependency : project.getConfigurations().detachedConfiguration(dependencies.create("xmlbeans")).getAllDependencies()) {
            if (dependency.getGroup() != null && dependency.getGroup().contains("xmlbeans") ||
                    dependency.getName().contains("xmlbeans")) {
                hasXmlBeans = true;
                break;
            }
        }
        return hasXmlBeans;
    }

    public void initPlugin(Project project) {
        final PluginContainer plugins = project.getPlugins();
        boolean isJavaPluginApplied = plugins.hasPlugin("java");
        boolean isJavaLibraryPluginApplied = plugins.hasPlugin("java-library");

        // If neither is applied, apply 'java-library'
        if (!isJavaPluginApplied && !isJavaLibraryPluginApplied) {
            plugins.apply("java-library");
        }
        JavaPluginConvention java = (JavaPluginConvention) project.getConvention().getPlugins().get("java");
        SourceSetContainer sourceSets = java.getSourceSets();

        SourceSet mainSourceSet = sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME);
        mainSourceSet.getJava().setSrcDirs(Arrays.asList(
                project.file(PATH_SRC_MAIN_JAVA),
                project.file(PATH_SRC_MAIN_JAVA_GENERATED)
        ));
        mainSourceSet.getResources().setSrcDirs(Arrays.asList(
                project.file(PATH_SRC_MAIN_RESOURCES),
                project.file(PATH_SRC_MAIN_RESOURCES_GENERATED)
        ));

        SourceSet xsd = sourceSets.create("xsd");
        xsd.getResources().setSrcDirs(Arrays.asList(
                project.file(PATH_XSD_SCHEMA),
                project.file(PATH_XSD_SCHEMA_CONFIG)
        ));

        project.getDependencies().add("implementation", "com.github.javaparser:javaparser-symbol-solver-core:3.+");
    }
}
