/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lv.brain.gradle.xmlbeans;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.Arrays;

import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.io.TempDir;
import static org.junit.jupiter.api.Assertions.*;

/**
 * A simple functional test for the 'lv.brain.gradle.xmlbeans.greeting' plugin.
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class XmlbeansPluginFunctionalTest {
    @TempDir
    static File projectDir;


    static final GradleRunner runner = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withDebug(true)
            ;


    @BeforeAll
    static void beforeAll() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), """
                        plugins {
                          id('java')
                          id('java-library')
                          id('lv.brain.gradle.xmlbeans')
                        }
                        repositories {
                            mavenCentral()
                        }
                        xsd{
                            schema "test.xsd"
                            config "test.xsdconfig"
                        }
                        """);
        runner.withProjectDir(projectDir);
        writeString(getXSDConfigFile(), """
                <xb:config xmlns:xb="http://xml.apache.org/xmlbeans/2004/02/xbean/config">
                  <xb:namespace uri="http://xml.apache.org/xmlbeans/2004/02/xbean/config">
                    <xb:package>lv.brain.test</xb:package>
                  </xb:namespace>
                </xb:config>
                """);
        writeString(getXSDFile(), """
                <?xml version="1.0" encoding="UTF-8" ?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
                                
                <xs:element name="shiporder">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="orderperson" type="xs:string"/>
                      <xs:element name="shipto">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="name" type="xs:string"/>
                            <xs:element name="address" type="xs:string"/>
                            <xs:element name="city" type="xs:string"/>
                            <xs:element name="country" type="xs:string"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                      <xs:element name="item" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="title" type="xs:string"/>
                            <xs:element name="note" type="xs:string" minOccurs="0"/>
                            <xs:element name="quantity" type="xs:positiveInteger"/>
                            <xs:element name="price" type="xs:decimal"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="orderid" type="xs:string" use="required"/>
                  </xs:complexType>
                </xs:element>
                                
                </xs:schema>
                """);
    }

    private static File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private static File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private static File getXSDConfigFile() {
        return new File(projectDir, "/src/xsd/config/test.xsdconfig");
    }

    private static File getXSDFile() {
        return new File(projectDir, "/src/xsd/schema/test.xsd");
    }

    @Test void canRunTask() throws IOException {
        BuildResult result = runner.withArguments("build").build();

        // Verify the result
        assertTrue(result.getOutput().contains("Task :generate-source"));
        assertTrue(result.getOutput().contains("Task :compileJava"));
        assertTrue(result.getOutput().contains("Task :build"));

    }

    private static void writeString(File file, String string) throws IOException {
        File dir = file.getParentFile();
        if (!dir.exists()) {
            dir.mkdirs();
        }
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
