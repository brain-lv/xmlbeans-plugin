/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lv.brain.gradle.xmlbeans;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * A simple functional test for the 'lv.brain.gradle.xmlbeans.greeting' plugin.
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class XmlbeansPluginFunctionalTest {
    @TempDir
    static File projectDir;


    static final GradleRunner runner = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withDebug(true);


    @BeforeAll
    static void beforeAll() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), "plugins {\n" +
                                    "  id('java')\n" +
                                    "  id('java-library')\n" +
                                    "  id('lv.brain.gradle.xmlbeans')\n" +
                                    "}\n" +
                                    "repositories {\n" +
                                    "    mavenCentral()\n" +
                                    "}\n" +
                                    "xsd{\n" +
                                    "    schema \"test.xsd\"\n" +
                                    "    config \"test.xsdconfig\"\n" +
                                    "}\n");
        runner.withProjectDir(projectDir);
        writeString(getXSDConfigFile(), "<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n" +
                                        "  <xb:namespace uri=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n" +
                                        "    <xb:package>lv.brain.test</xb:package>\n" +
                                        "  </xb:namespace>\n" +
                                        "</xb:config>\n");
        writeString(getXSDFile(), "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
                                  "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n" +
                                  "\n" +
                                  "<xs:element name=\"shiporder\">\n" +
                                  "  <xs:complexType>\n" +
                                  "    <xs:sequence>\n" +
                                  "      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n" +
                                  "      <xs:element name=\"shipto\">\n" +
                                  "        <xs:complexType>\n" +
                                  "          <xs:sequence>\n" +
                                  "            <xs:element name=\"name\" type=\"xs:string\"/>\n" +
                                  "            <xs:element name=\"address\" type=\"xs:string\"/>\n" +
                                  "            <xs:element name=\"city\" type=\"xs:string\"/>\n" +
                                  "            <xs:element name=\"country\" type=\"xs:string\"/>\n" +
                                  "          </xs:sequence>\n" +
                                  "        </xs:complexType>\n" +
                                  "      </xs:element>\n" +
                                  "      <xs:element name=\"item\" maxOccurs=\"unbounded\">\n" +
                                  "        <xs:complexType>\n" +
                                  "          <xs:sequence>\n" +
                                  "            <xs:element name=\"title\" type=\"xs:string\"/>\n" +
                                  "            <xs:element name=\"note\" type=\"xs:string\" minOccurs=\"0\"/>\n" +
                                  "            <xs:element name=\"quantity\" type=\"xs:positiveInteger\"/>\n" +
                                  "            <xs:element name=\"price\" type=\"xs:decimal\"/>\n" +
                                  "          </xs:sequence>\n" +
                                  "        </xs:complexType>\n" +
                                  "      </xs:element>\n" +
                                  "    </xs:sequence>\n" +
                                  "    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n" +
                                  "  </xs:complexType>\n" +
                                  "</xs:element>\n" +
                                  "\n" +
                                  "</xs:schema>\n");
    }

    private static File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private static File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private static File getXSDConfigFile() {
        return new File(projectDir, "/src/xsd/config/test.xsdconfig");
    }

    private static File getXSDFile() {
        return new File(projectDir, "/src/xsd/schema/test.xsd");
    }

    @Test
    void canRunTask() {
        BuildResult result = runner.withArguments("build").build();

        // Verify the result
        assertTrue(result.getOutput().contains("Task :generate-source"));
        assertTrue(result.getOutput().contains("Task :compileJava"));
        assertTrue(result.getOutput().contains("Task :build"));

    }

    private static void writeString(File file, String string) throws IOException {
        File dir = file.getParentFile();
        if (!dir.exists()) {
            dir.mkdirs();
        }
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
